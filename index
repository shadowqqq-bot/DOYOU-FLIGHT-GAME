<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>비행기 슈팅 게임</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Jua&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Jua', sans-serif;
            margin: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #0c0a18;
            color: white;
            overflow: hidden; /* 스크롤바 숨기기 */
        }
        #game-container {
            position: relative;
            width: 100vw;
            height: 100vh;
            max-width: 800px;
            max-height: 100%; /* 모바일 화면 꽉 채우기 */
            box-shadow: 0 0 25px rgba(173, 216, 230, 0.5); /* 밝은 파랑 계열의 그림자 효과 */
            border-radius: 12px;
            overflow: hidden; /* 컨테이너 밖으로 나가는 요소 숨기기 */
        }
        canvas {
            display: block;
            width: 100%;
            height: 100%;
            background: linear-gradient(#0c0a18, #2a2a72, #000000); /* 우주 느낌의 배경 */
        }
        #ui-layer {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            pointer-events: none; /* UI 요소가 게임 클릭을 방해하지 않도록 설정 */
        }
        #game-stats {
            position: absolute;
            top: 20px;
            left: 20px;
            display: flex;
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
        #score-display, #coin-display {
            font-size: 1.5rem;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.7);
        }
        #health-display {
            font-size: 1.8rem;
            letter-spacing: 0.2em;
        }
        .modal {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            pointer-events: auto; /* 모달 내 버튼 클릭이 가능하도록 설정 */
        }
        .modal-content {
            background: rgba(41, 41, 85, 0.9);
            padding: 40px;
            border-radius: 15px;
            border: 2px solid #89a7ff;
            box-shadow: 0 0 20px rgba(137, 167, 255, 0.5);
        }
        #ranking-list {
            list-style-type: decimal;
            padding-left: 2.5rem;
            text-align: left;
            max-height: 40vh;
            overflow-y: auto;
        }
        #ranking-list li {
            font-size: 1.5rem;
            margin-bottom: 0.5rem;
        }
        #name-input {
            pointer-events: auto;
            color: black;
        }
        /* 상점 스타일 */
        #skin-list {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 20px;
            max-height: 50vh;
            overflow-y: auto;
            padding: 10px;
        }
        .skin-item {
            border: 2px solid #89a7ff;
            border-radius: 10px;
            padding: 10px;
            background: rgba(0,0,0,0.3);
            text-align: center;
        }
        .skin-preview {
            width: 100px;
            height: 100px;
            margin: 0 auto;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        .skin-button { pointer-events: auto; }
        
        /* 스킬 선택 화면 스타일 */
        #skill-choices {
            display: flex;
            gap: 20px;
            margin-top: 20px;
        }
        .skill-card {
            border: 2px solid #f1c40f;
            border-radius: 10px;
            padding: 20px;
            width: 180px;
            background: rgba(91, 9, 130, 0.5);
            cursor: pointer;
            transition: transform 0.2s, box-shadow 0.2s;
            pointer-events: auto;
        }
        .skill-card:hover {
            transform: translateY(-10px);
            box-shadow: 0 0 15px #f1c40f;
        }
        .control-button {
            pointer-events: auto;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }
    </style>
</head>
<body>

<div id="game-container">
    <canvas id="gameCanvas"></canvas>
    <div id="ui-layer">
        <div id="game-stats" class="hidden">
            <div id="score-display">점수: 0</div>
            <div id="coin-display">코인: 0</div>
            <div id="health-display"></div>
        </div>
        
        <!-- 로비 화면 -->
        <div id="lobby-screen" class="modal">
            <div class="modal-content">
                <h1 class="text-5xl font-bold mb-4">우주 비행기 슈팅</h1>
                <p class="text-xl mb-6">다가오는 적들을 모두 격추하세요!</p>
                <div id="lobby-coin-display" class="text-2xl mb-4"></div>
                <div class="flex gap-4">
                    <button id="start-button" class="px-8 py-4 bg-indigo-600 hover:bg-indigo-700 rounded-lg text-white font-bold text-2xl shadow-lg transition duration-300 transform hover:scale-105">
                        게임 시작
                    </button>
                    <button id="shop-button" class="px-8 py-4 bg-purple-600 hover:bg-purple-700 rounded-lg text-white font-bold text-2xl shadow-lg transition duration-300 transform hover:scale-105">
                        상점
                    </button>
                    <button id="ranking-button-main" class="px-8 py-4 bg-gray-600 hover:bg-gray-700 rounded-lg text-white font-bold text-2xl shadow-lg transition duration-300 transform hover:scale-105">
                        랭킹
                    </button>
                </div>
            </div>
        </div>

        <!-- 게임 오버 화면 -->
        <div id="game-over-screen" class="modal hidden">
            <div class="modal-content">
                <h2 class="text-5xl font-bold mb-4">게임 오버</h2>
                <p id="final-score" class="text-2xl mb-2"></p>
                <p id="earned-coins" class="text-2xl mb-6"></p>
                <div class="flex items-center gap-2 mb-4">
                    <input type="text" id="name-input" placeholder="이름 입력" class="px-4 py-2 rounded text-xl">
                    <button id="save-score-button" class="px-6 py-2 bg-blue-600 hover:bg-blue-700 rounded-lg text-white font-bold text-xl shadow-lg transition">저장</button>
                </div>
                <button id="restart-button" class="px-8 py-4 bg-green-600 hover:bg-green-700 rounded-lg text-white font-bold text-2xl shadow-lg transition duration-300 transform hover:scale-105">
                    다시 시작
                </button>
            </div>
        </div>
        
        <!-- 랭킹 화면 -->
        <div id="ranking-screen" class="modal hidden">
            <div class="modal-content">
                <h2 class="text-5xl font-bold mb-4">명예의 전당</h2>
                <ol id="ranking-list" class="mb-6"></ol>
                 <div class="flex gap-4">
                    <button id="play-again-button" class="px-8 py-4 bg-green-600 hover:bg-green-700 rounded-lg text-white font-bold text-2xl shadow-lg transition duration-300 transform hover:scale-105">
                        다시 하기
                    </button>
                    <button id="main-menu-button" class="px-8 py-4 bg-gray-600 hover:bg-gray-700 rounded-lg text-white font-bold text-2xl shadow-lg transition duration-300 transform hover:scale-105">
                        로비로
                    </button>
                </div>
            </div>
        </div>

        <!-- 상점 화면 -->
        <div id="shop-screen" class="modal hidden">
            <div class="modal-content w-11/12 max-w-4xl">
                 <h2 class="text-5xl font-bold mb-4">스킨 상점</h2>
                 <div id="shop-coin-display" class="text-2xl mb-4"></div>
                 <div id="skin-list" class="mb-6"></div>
                 <button id="back-to-lobby-button" class="px-8 py-4 bg-gray-600 hover:bg-gray-700 rounded-lg text-white font-bold text-2xl shadow-lg transition duration-300 transform hover:scale-105">
                    로비로
                 </button>
            </div>
        </div>
        
        <!-- 스킬 선택 화면 -->
        <div id="skill-choice-screen" class="modal hidden">
            <div class="modal-content">
                <h2 class="text-5xl font-bold mb-4">스킬 선택</h2>
                <p class="text-xl mb-6">보스를 처치했습니다! 보상으로 스킬 하나를 선택하세요.</p>
                <div id="skill-choices"></div>
            </div>
        </div>
        
        <!-- 모바일 컨트롤러 -->
        <div id="mobile-controls" class="absolute bottom-10 w-full flex justify-between items-end px-5 pointer-events-none hidden">
            <!-- Left controls -->
            <div class="flex gap-4">
                <button id="left-button" class="control-button text-4xl bg-white/20 backdrop-blur-sm rounded-full w-20 h-20">&lt;</button>
                <button id="right-button" class="control-button text-4xl bg-white/20 backdrop-blur-sm rounded-full w-20 h-20">&gt;</button>
            </div>

            <!-- Right controls -->
            <div>
                <button id="shoot-button" class="control-button text-4xl bg-red-500/40 backdrop-blur-sm rounded-full w-24 h-24">💥</button>
            </div>
        </div>
    </div>
</div>

<script>
    // --- 초기 설정 ---
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    const allScreens = document.querySelectorAll('.modal');

    const lobbyScreen = document.getElementById('lobby-screen');
    const gameOverScreen = document.getElementById('game-over-screen');
    const rankingScreen = document.getElementById('ranking-screen');
    const shopScreen = document.getElementById('shop-screen');
    const skillChoiceScreen = document.getElementById('skill-choice-screen');
    
    const startButton = document.getElementById('start-button');
    const restartButton = document.getElementById('restart-button');
    const rankingButtonMain = document.getElementById('ranking-button-main');
    const shopButton = document.getElementById('shop-button');
    const saveScoreButton = document.getElementById('save-score-button');
    const playAgainButton = document.getElementById('play-again-button');
    const mainMenuButton = document.getElementById('main-menu-button');
    const backToLobbyButton = document.getElementById('back-to-lobby-button');
    
    const mobileControls = document.getElementById('mobile-controls');
    const leftButton = document.getElementById('left-button');
    const rightButton = document.getElementById('right-button');
    const shootButton = document.getElementById('shoot-button');
    
    const nameInput = document.getElementById('name-input');
    const rankingList = document.getElementById('ranking-list');
    const skinList = document.getElementById('skin-list');
    const skillChoicesContainer = document.getElementById('skill-choices');
    
    const gameStats = document.getElementById('game-stats');
    const scoreDisplay = document.getElementById('score-display');
    const coinDisplay = document.getElementById('coin-display');
    const lobbyCoinDisplay = document.getElementById('lobby-coin-display');
    const shopCoinDisplay = document.getElementById('shop-coin-display');
    const healthDisplay = document.getElementById('health-display');
    const finalScoreDisplay = document.getElementById('final-score');
    const earnedCoinsDisplay = document.getElementById('earned-coins');

    let animationFrameId;
    let score, coins, currentRoundCoins;
    let gameOver, gamePaused;
    let keys = {};
    let player;
    let bullets, enemies, enemyBullets, bossBullets, itemCoins, healthPacks;
    let enemySpawnTimer, stars, shootCooldown;
    let spacebarHoldStart = 0;
    let isLaserActive = false, laserEndTime = 0, laserCooldownEndTime = 0;
    
    let boss = null;
    let bossSpawned = false, superBossSpawned = false;

    // --- 스킨 데이터 ---
    const skins = [
        { id: 'default', name: '기본 비행기', price: 0, draw: (ctx, x, y, w, h) => { ctx.fillStyle = '#c0c0c0'; ctx.beginPath(); ctx.moveTo(x + w / 2, y); ctx.lineTo(x, y + h); ctx.lineTo(x + w, y + h); ctx.closePath(); ctx.fill(); ctx.fillStyle = '#89a7ff'; ctx.beginPath(); ctx.arc(x + w / 2, y + h / 2.5, w / 5, 0, Math.PI * 2); ctx.fill(); } },
        { id: 'red_comet', name: '레드 코멧', price: 5000, draw: (ctx, x, y, w, h) => { ctx.fillStyle = '#e74c3c'; ctx.beginPath(); ctx.moveTo(x + w / 2, y); ctx.lineTo(x, y + h); ctx.lineTo(x + w / 2, y + h * 0.7); ctx.lineTo(x + w, y + h); ctx.closePath(); ctx.fill(); } },
        { id: 'green_arrow', name: '그린 애로우', price: 10000, draw: (ctx, x, y, w, h) => { ctx.fillStyle = '#2ecc71'; ctx.fillRect(x + w * 0.4, y, w * 0.2, h); ctx.beginPath(); ctx.moveTo(x, y + h * 0.7); ctx.lineTo(x + w/2, y + h * 0.2); ctx.lineTo(x + w, y + h * 0.7); ctx.closePath(); ctx.fill(); } },
        { id: 'gold_ship', name: '황금선', price: 50000, draw: (ctx, x, y, w, h) => { ctx.fillStyle = '#f1c40f'; ctx.beginPath(); ctx.moveTo(x + w / 2, y); ctx.lineTo(x, y + h*0.4); ctx.lineTo(x, y + h); ctx.lineTo(x + w, y + h); ctx.lineTo(x+w, y+h*0.4); ctx.closePath(); ctx.fill(); } }
    ];
    let ownedSkins = ['default'], equippedSkin = 'default';

    // --- 스킬 데이터 ---
    const skills = [
        { id: 'damage_up', name: '공격력 강화', description: '총알의 공격력이 2배가 됩니다.' },
        { id: 'fire_rate_up', name: '연사 속도 증가', description: '총알 발사 속도가 2배 빨라집니다.' },
        { id: 'shield', name: '보호막', description: '적의 공격을 1회 막아주는 보호막을 얻습니다.' },
        { id: 'pierce_shot', name: '관통탄', description: '총알이 적을 관통합니다.'},
        { id: 'extra_life', name: '추가 생명', description: '최대 체력과 현재 체력이 1 증가합니다.'}
    ];

    // --- 게임 데이터 관리 ---
    function loadGameData() {
        coins = parseInt(localStorage.getItem('airplaneCoins') || '0', 10);
        ownedSkins = JSON.parse(localStorage.getItem('airplaneOwnedSkins') || '["default"]');
        equippedSkin = localStorage.getItem('airplaneEquippedSkin') || 'default';
        updateCoinDisplays();
    }
    function saveGameData() {
        localStorage.setItem('airplaneCoins', coins);
        localStorage.setItem('airplaneOwnedSkins', JSON.stringify(ownedSkins));
        localStorage.setItem('airplaneEquippedSkin', equippedSkin);
    }
    function updateCoinDisplays() {
        const formattedCoins = (coins + (currentRoundCoins || 0)).toLocaleString();
        lobbyCoinDisplay.textContent = `💰 보유 코인: ${coins.toLocaleString()}`;
        shopCoinDisplay.textContent = `💰 보유 코인: ${coins.toLocaleString()}`;
        coinDisplay.textContent = `코인: ${formattedCoins}`;
    }

    // --- 게임 객체 클래스 ---
    class Player {
        constructor(x, y, w, h, speed) {
            this.x = x; this.y = y; this.width = w; this.height = h;
            this.speed = speed; this.health = 3; this.maxHealth = 3;
            // 스킬 관련 속성
            this.bulletDamage = 1; this.shootCooldownFrames = 10;
            this.hasShield = false; this.pierceShot = false;
        }
        draw() {
            const skin = skins.find(s => s.id === equippedSkin);
            if (skin) skin.draw(ctx, this.x, this.y, this.width, this.height);
            if (this.hasShield) {
                ctx.strokeStyle = '#3498db'; ctx.lineWidth = 3;
                ctx.beginPath(); ctx.arc(this.x + this.width / 2, this.y + this.height / 2, this.width / 2 + 10, 0, Math.PI * 2);
                ctx.stroke();
            }
        }
        update() {
            if (keys['ArrowLeft'] && this.x > 0) this.x -= this.speed;
            if (keys['ArrowRight'] && this.x < canvas.width - this.width) this.x += this.speed;
            this.draw();
        }
        takeDamage() {
            if (this.hasShield) { this.hasShield = false; return; }
            this.health--;
            updateHealthDisplay();
        }
    }

    class Bullet {
        constructor(x, y, w, h, speed, color) {
            this.x = x; this.y = y; this.width = w; this.height = h;
            this.speed = speed; this.color = color;
        }
        draw() {
            ctx.fillStyle = this.color; ctx.shadowBlur = 10; ctx.shadowColor = this.color;
            ctx.fillRect(this.x, this.y, this.width, this.height); ctx.shadowBlur = 0;
        }
        update() { this.y += this.speed; }
    }

    class Enemy {
        constructor(x, y, w, h, speed, health, color) {
            this.x = x; this.y = y; this.width = w; this.height = h;
            this.speed = speed; this.health = health; this.color = color;
            this.dx = (Math.random() - 0.5) * 3; this.laserHitCooldown = 0;
        }
        draw() {
            ctx.fillStyle = this.color; ctx.beginPath(); ctx.moveTo(this.x, this.y);
            ctx.lineTo(this.x + this.width, this.y);
            ctx.lineTo(this.x + this.width / 2, this.y + this.height);
            ctx.closePath(); ctx.fill();
        }
        update() {
            this.y += this.speed; this.x += this.dx;
            if (this.laserHitCooldown > 0) this.laserHitCooldown--;
            if (this.x <= 0 || this.x + this.width >= canvas.width) this.dx *= -1;
            if (Math.random() < 0.005 && this.y > 0 && this.y < canvas.height / 2) this.shoot();
        }
        shoot() {
            const bulletX = this.x + this.width / 2 - 3; const bulletY = this.y + this.height;
            enemyBullets.push(new Bullet(bulletX, bulletY, 6, 12, 4, '#9b59b6'));
        }
    }

    class Boss {
        constructor(x, y, w, h, speed, health) {
            this.x = x; this.y = y; this.width = w; this.height = h;
            this.speed = speed; this.health = health; this.maxHealth = health;
            this.dx = speed; this.shootTimer = 0; this.laserHitCooldown = 0;
        }
        draw() {
            ctx.fillStyle = '#8e44ad'; ctx.fillRect(this.x, this.y, this.width, this.height);
            const healthBarWidth = this.width * (this.health / this.maxHealth);
            ctx.fillStyle = '#c0392b'; ctx.fillRect(this.x, this.y - 20, this.width, 10);
            ctx.fillStyle = '#2ecc71'; ctx.fillRect(this.x, this.y - 20, healthBarWidth, 10);
        }
        update() {
            this.x += this.dx;
            if (this.laserHitCooldown > 0) this.laserHitCooldown--;
            if (this.x <= 0 || this.x + this.width >= canvas.width) this.dx *= -1;
            if (Math.random() < 0.015) this.dx *= -1;
            this.shootTimer++; if (this.shootTimer % 50 === 0) this.shoot();
            this.draw();
        }
        shoot() {
            const bulletX = this.x + this.width / 2 - 5; const bulletY = this.y + this.height;
            bossBullets.push(new Bullet(bulletX, bulletY, 10, 20, 5, '#f39c12'));
        }
    }

    class SuperBoss extends Boss {
        constructor(x, y, w, h, speed, health) { super(x, y, w, h, speed, health); }
        draw() {
            ctx.fillStyle = '#34495e'; ctx.fillRect(this.x, this.y, this.width, this.height);
            ctx.strokeStyle = '#e74c3c'; ctx.lineWidth = 4; ctx.strokeRect(this.x, this.y, this.width, this.height);
            const healthBarWidth = this.width * (this.health / this.maxHealth);
            ctx.fillStyle = '#c0392b'; ctx.fillRect(this.x, this.y - 20, this.width, 10);
            ctx.fillStyle = '#2ecc71'; ctx.fillRect(this.x, this.y - 20, healthBarWidth, 10);
        }
        shoot() {
            const centerX = this.x + this.width / 2, bulletY = this.y + this.height;
            bossBullets.push(new Bullet(centerX - 5, bulletY, 10, 20, 7, '#e74c3c'));
            bossBullets.push(new Bullet(centerX - 50, bulletY, 10, 20, 7, '#e74c3c'));
            bossBullets.push(new Bullet(centerX + 40, bulletY, 10, 20, 7, '#e74c3c'));
        }
    }
    
    class Star {
        constructor(x, y, radius, speed) {
            this.x = x; this.y = y; this.radius = radius; this.speed = speed;
        }
        draw() {
            ctx.fillStyle = 'white'; ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2); ctx.fill();
        }
        update() {
            this.y += this.speed; if (this.y > canvas.height) { this.y = 0; this.x = Math.random() * canvas.width; }
        }
    }

    class Coin {
        constructor(x, y, value) {
            this.x = x; this.y = y; this.width = 20; this.height = 20; this.radius = 10;
            this.speed = 2; this.value = value;
        }
        draw() {
            ctx.fillStyle = '#f1c40f'; ctx.beginPath();
            ctx.arc(this.x + this.radius, this.y + this.radius, this.radius, 0, Math.PI * 2);
            ctx.fill(); ctx.fillStyle = '#e67e22'; ctx.textAlign = 'center'; ctx.textBaseline = 'middle';
            ctx.font = 'bold 12px Jua'; ctx.fillText('C', this.x + this.radius, this.y + this.radius);
        }
        update() { this.y += this.speed; }
    }

    class HealthPack {
        constructor(x, y) {
            this.x = x; this.y = y; this.width = 20; this.height = 20; this.speed = 2;
        }
        draw() {
            ctx.fillStyle = '#2ecc71';
            ctx.fillRect(this.x, this.y + this.width / 2 - 2.5, this.width, 5);
            ctx.fillRect(this.x + this.width / 2 - 2.5, this.y, 5, this.height);
        }
        update() { this.y += this.speed; }
    }

    // --- 게임 초기화 ---
    function init() {
        const container = document.getElementById('game-container');
        canvas.width = container.clientWidth; canvas.height = container.clientHeight;
        score = 0; currentRoundCoins = 0; gameOver = false; gamePaused = false;
        bullets = []; enemies = []; enemyBullets = []; bossBullets = [];
        itemCoins = []; healthPacks = [];
        enemySpawnTimer = 0; shootCooldown = 0; boss = null;
        bossSpawned = false; superBossSpawned = false;
        player = new Player(canvas.width / 2 - 25, canvas.height - 120, 50, 50, 5); // Y 위치 조정
        isLaserActive = false; laserEndTime = 0; laserCooldownEndTime = 0; spacebarHoldStart = 0;
        stars = Array.from({ length: 100 }, () => new Star(Math.random() * canvas.width, Math.random() * canvas.height, Math.random() * 1.5, Math.random() * 0.5 + 0.2));
        scoreDisplay.textContent = `점수: ${score}`;
        updateCoinDisplays(); updateHealthDisplay();
    }

    // --- 게임 루프 ---
    function gameLoop(timestamp) {
        if (gamePaused) { animationFrameId = requestAnimationFrame(gameLoop); return; }
        if (player.health <= 0) gameOver = true;
        if (gameOver) {
            coins += currentRoundCoins; saveGameData();
            cancelAnimationFrame(animationFrameId); showGameOverScreen(); return;
        }
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        stars.forEach(star => { star.update(); star.draw(); });
        player.update();

        const now = performance.now();
        if (keys['Space'] && !isLaserActive && now > laserCooldownEndTime) {
            if (spacebarHoldStart === 0) spacebarHoldStart = now;
            const chargeTime = now - spacebarHoldStart;
            drawLaserChargeBar(chargeTime / 4000);
            if (chargeTime > 4000) activateLaser(now);
        }
        if (isLaserActive) {
            if (now > laserEndTime) {
                isLaserActive = false;
                laserCooldownEndTime = now + 10000;
            } else {
                drawLaser();
            }
        }
        if (!keys['Space']) spacebarHoldStart = 0;

        if (shootCooldown > 0) shootCooldown--;
        if (keys['Space'] && !isLaserActive && shootCooldown === 0) { shoot(); }
        
        if (score >= 10000 && bossSpawned && !superBossSpawned && !boss) { superBossSpawned = true; spawnSuperBoss(); }
        else if (score >= 1500 && !bossSpawned) { bossSpawned = true; spawnBoss(); }
        
        [bullets, bossBullets, enemyBullets, itemCoins, healthPacks].forEach(arr => {
            arr.forEach((item, index) => { item.update(); item.draw(); if (item.y > canvas.height) arr.splice(index, 1); });
        });
        if (!boss) { enemySpawnTimer++; if (enemySpawnTimer > 50) { spawnEnemy(); enemySpawnTimer = 0; } }
        enemies.forEach((enemy) => { enemy.update(); enemy.draw(); });
        if (boss) boss.update();
        handleCollisions();
        animationFrameId = requestAnimationFrame(gameLoop);
    }

    // --- 보조 함수들 ---
    function spawnEnemy() {
        if (Math.random() < 0.2) { enemies.push(new Enemy(Math.random() * (canvas.width - 60), -60, 60, 60, 1, 2, '#e74c3c')); }
        else { const size = Math.random() * 20 + 30; enemies.push(new Enemy(Math.random() * (canvas.width - size), -size, size, size, Math.random() * 2 + 1, 1, '#ff6b6b')); }
    }
    function spawnBoss() { boss = new Boss(canvas.width / 2 - 75, 50, 150, 100, 2, 30); }
    function spawnSuperBoss() { boss = new SuperBoss(canvas.width / 2 - 100, 50, 200, 120, 3, 100); }
    function shoot() {
        const bulletX = player.x + player.width / 2 - 2.5; const bulletY = player.y;
        bullets.push(new Bullet(bulletX, bulletY, 5, 15, -10, '#f0e68c'));
        shootCooldown = player.shootCooldownFrames;
    }
    function isColliding(rect1, rect2) {
        if (!rect1 || !rect2) return false;
        return rect1.x < rect2.x + rect2.width && rect1.x + rect1.width > rect2.x && rect1.y < rect2.y + rect2.height && rect1.y + rect1.height > rect2.y;
    }

    function defeatEnemy(enemy, index) {
        const isSuperBoss = enemy instanceof SuperBoss;
        const isBoss = enemy instanceof Boss;
        const isBig = !isBoss && enemy.width > 50;
        
        let scoreGain = 0;
        let coinDrops = [];

        if (isBoss) {
            scoreGain = isSuperBoss ? 10000 : 5000;
            const coinCount = isSuperBoss ? 50 : 25;
            for(let c = 0; c < coinCount; c++) {
                coinDrops.push(new Coin(enemy.x + enemy.width / 2 + (Math.random() - 0.5) * enemy.width, enemy.y + enemy.height/2 + (Math.random() - 0.5) * enemy.height, 20));
            }
            boss = null;
            presentSkillChoice();
        } else {
            scoreGain = isBig ? 250 : 100;
            const coinCount = isBig ? 2 : 1;
            for(let c = 0; c < coinCount; c++) {
                coinDrops.push(new Coin(enemy.x + (Math.random() - 0.5) * 20, enemy.y, 10));
            }
            if (Math.random() < 0.15) {
                healthPacks.push(new HealthPack(enemy.x, enemy.y));
            }
            enemies.splice(index, 1);
        }
        
        score += scoreGain;
        itemCoins.push(...coinDrops);
        scoreDisplay.textContent = `점수: ${score.toLocaleString()}`;
    }

    function handleCollisions() {
        for (let i = enemies.length - 1; i >= 0; i--) if (isColliding(player, enemies[i])) { player.takeDamage(); enemies.splice(i, 1); break; }
        for (let i = enemyBullets.length - 1; i >= 0; i--) if (isColliding(player, enemyBullets[i])) { player.takeDamage(); enemyBullets.splice(i, 1); break; }
        for (let i = bossBullets.length - 1; i >= 0; i--) if (isColliding(player, bossBullets[i])) { player.takeDamage(); bossBullets.splice(i, 1); break; }
        
        for (let i = bullets.length - 1; i >= 0; i--) {
            for (let j = enemies.length - 1; j >= 0; j--) {
                if (bullets[i] && enemies[j] && isColliding(bullets[i], enemies[j])) {
                    enemies[j].health -= player.bulletDamage;
                    if (!player.pierceShot) bullets.splice(i, 1);
                    if (enemies[j].health <= 0) {
                        defeatEnemy(enemies[j], j);
                    }
                    if (!player.pierceShot) break;
                }
            }
        }

        if (boss) {
            for (let i = bullets.length - 1; i >= 0; i--) {
                if (bullets[i] && isColliding(bullets[i], boss)) {
                    boss.health -= player.bulletDamage;
                    if (!player.pierceShot) bullets.splice(i, 1);
                    if (boss.health <= 0) {
                        defeatEnemy(boss);
                    }
                    if (!player.pierceShot) break;
                }
            }
        }

        for (let i = itemCoins.length - 1; i >= 0; i--) if (isColliding(player, itemCoins[i])) { currentRoundCoins += itemCoins[i].value; updateCoinDisplays(); itemCoins.splice(i, 1); }
        for (let i = healthPacks.length - 1; i >= 0; i--) if (isColliding(player, healthPacks[i])) { if (player.health < player.maxHealth) { player.health++; updateHealthDisplay(); } healthPacks.splice(i, 1); }

        if (isLaserActive) {
            const laserRect = { x: player.x, y: 0, width: player.width, height: player.y };
            
            for (let i = enemies.length - 1; i >= 0; i--) {
                const enemy = enemies[i];
                if (isColliding(laserRect, enemy) && enemy.laserHitCooldown === 0) {
                    enemy.health -= 0.5; enemy.laserHitCooldown = 5;
                    if (enemy.health <= 0) defeatEnemy(enemy, i);
                }
            }
            if (boss && isColliding(laserRect, boss) && boss.laserHitCooldown === 0) {
                boss.health -= 0.5; boss.laserHitCooldown = 5;
                if (boss.health <= 0) defeatEnemy(boss);
            }
        }
    }
    
    function activateLaser(now) {
        isLaserActive = true; laserEndTime = now + 10000; spacebarHoldStart = 0;
    }

    function drawLaser() {
        ctx.fillStyle = 'rgba(0, 150, 255, 0.5)';
        ctx.fillRect(player.x, 0, player.width, player.y);
        ctx.fillStyle = 'white';
        ctx.fillRect(player.x + player.width/2 - 2, 0, 4, player.y);
    }
    
    function drawLaserChargeBar(ratio) {
        if (ratio > 1) ratio = 1;
        const barY = player.y + player.height + 10;
        ctx.fillStyle = 'rgba(0,0,0,0.5)';
        ctx.fillRect(player.x, barY, player.width, 10);
        ctx.fillStyle = '#0096FF';
        ctx.fillRect(player.x, barY, player.width * ratio, 10);
    }

    function updateHealthDisplay() {
        healthDisplay.innerHTML = '';
        for (let i = 0; i < player.maxHealth; i++) healthDisplay.innerHTML += i < player.health ? '❤️' : '🖤';
    }
    function showGameOverScreen() {
        finalScoreDisplay.textContent = `최종 점수: ${score.toLocaleString()}`;
        earnedCoinsDisplay.textContent = `획득 코인: ${currentRoundCoins.toLocaleString()} 💰`;
        gameOverScreen.classList.remove('hidden');
        mobileControls.classList.add('hidden');
    }
    function getRankings() { return JSON.parse(localStorage.getItem('airplaneShooterRankings') || '[]'); }
    function saveScore() {
        const name = nameInput.value.trim(); if (!name) { alert('이름을 입력해주세요!'); return; }
        const rankings = getRankings(); rankings.push({ name, score });
        rankings.sort((a, b) => b.score - a.score);
        localStorage.setItem('airplaneShooterRankings', JSON.stringify(rankings.slice(0, 10)));
        nameInput.value = ''; showRankingScreen();
    }
    function showRankingScreen() {
        allScreens.forEach(s => s.classList.add('hidden'));
        rankingScreen.classList.remove('hidden');
        const rankings = getRankings(); rankingList.innerHTML = '';
        if (rankings.length === 0) { rankingList.innerHTML = '<li>아직 랭킹이 없습니다.</li>'; }
        else { rankings.forEach(entry => { const li = document.createElement('li'); li.textContent = `${entry.name}: ${entry.score.toLocaleString()}점`; rankingList.appendChild(li); }); }
    }

    function presentSkillChoice() {
        gamePaused = true;
        skillChoicesContainer.innerHTML = '';
        let availableSkills = [...skills];
        for(let i = 0; i < 3; i++) {
            if (availableSkills.length === 0) break;
            const randomIndex = Math.floor(Math.random() * availableSkills.length);
            const skill = availableSkills.splice(randomIndex, 1)[0];
            const card = document.createElement('div');
            card.className = 'skill-card';
            card.innerHTML = `<h3 class="text-2xl font-bold mb-2">${skill.name}</h3><p>${skill.description}</p>`;
            card.onclick = () => applySkill(skill.id);
            skillChoicesContainer.appendChild(card);
        }
        skillChoiceScreen.classList.remove('hidden');
    }
    function applySkill(skillId) {
        switch (skillId) {
            case 'damage_up': player.bulletDamage *= 2; break;
            case 'fire_rate_up': player.shootCooldownFrames /= 2; break;
            case 'shield': player.hasShield = true; break;
            case 'pierce_shot': player.pierceShot = true; break;
            case 'extra_life': player.maxHealth++; player.health++; updateHealthDisplay(); break;
        }
        skillChoiceScreen.classList.add('hidden');
        gamePaused = false;
    }

    function populateShop() {
        skinList.innerHTML = '';
        skins.forEach(skin => {
            const isOwned = ownedSkins.includes(skin.id), isEquipped = equippedSkin === skin.id;
            const item = document.createElement('div'); item.className = 'skin-item';
            const previewCanvas = document.createElement('canvas');
            previewCanvas.className = 'skin-preview'; previewCanvas.width = 100; previewCanvas.height = 100;
            skin.draw(previewCanvas.getContext('2d'), 25, 25, 50, 50);
            const name = document.createElement('p'); name.textContent = skin.name;
            const button = document.createElement('button');
            button.className = 'skin-button px-4 py-2 rounded-lg text-white font-bold shadow-lg';
            if (isEquipped) { button.textContent = '장착중'; button.disabled = true; button.classList.add('bg-gray-500'); }
            else if (isOwned) { button.textContent = '장착'; button.classList.add('bg-green-600', 'hover:bg-green-700'); button.onclick = () => { equippedSkin = skin.id; saveGameData(); populateShop(); }; }
            else { button.textContent = `구매 (💰${skin.price.toLocaleString()})`; button.classList.add('bg-blue-600', 'hover:bg-blue-700'); button.onclick = () => { if (coins >= skin.price) { coins -= skin.price; ownedSkins.push(skin.id); equippedSkin = skin.id; saveGameData(); updateCoinDisplays(); populateShop(); } else { alert('코인이 부족합니다!'); } }; }
            item.appendChild(previewCanvas); item.appendChild(name); item.appendChild(button);
            skinList.appendChild(item);
        });
    }

    // --- 이벤트 리스너 ---
    window.addEventListener('keydown', (e) => { keys[e.code] = true; });
    window.addEventListener('keyup', (e) => { keys[e.code] = false; });
    startButton.addEventListener('click', () => { lobbyScreen.classList.add('hidden'); gameStats.classList.remove('hidden'); mobileControls.classList.remove('hidden'); init(); requestAnimationFrame(gameLoop); });
    restartButton.addEventListener('click', () => { gameOverScreen.classList.add('hidden'); gameStats.classList.remove('hidden'); mobileControls.classList.remove('hidden'); init(); requestAnimationFrame(gameLoop); });
    saveScoreButton.addEventListener('click', saveScore);
    rankingButtonMain.addEventListener('click', showRankingScreen);
    shopButton.addEventListener('click', () => { lobbyScreen.classList.add('hidden'); shopScreen.classList.remove('hidden'); populateShop(); });
    backToLobbyButton.addEventListener('click', () => { shopScreen.classList.add('hidden'); lobbyScreen.classList.remove('hidden'); mobileControls.classList.add('hidden'); updateCoinDisplays(); });
    playAgainButton.addEventListener('click', () => { rankingScreen.classList.add('hidden'); gameStats.classList.remove('hidden'); mobileControls.classList.remove('hidden'); init(); requestAnimationFrame(gameLoop); });
    mainMenuButton.addEventListener('click', () => { rankingScreen.classList.add('hidden'); lobbyScreen.classList.remove('hidden'); mobileControls.classList.add('hidden');});
    
    // 모바일 터치 이벤트
    leftButton.addEventListener('touchstart', (e) => { e.preventDefault(); keys['ArrowLeft'] = true; });
    leftButton.addEventListener('touchend', (e) => { e.preventDefault(); keys['ArrowLeft'] = false; });
    rightButton.addEventListener('touchstart', (e) => { e.preventDefault(); keys['ArrowRight'] = true; });
    rightButton.addEventListener('touchend', (e) => { e.preventDefault(); keys['ArrowRight'] = false; });
    shootButton.addEventListener('touchstart', (e) => { e.preventDefault(); keys['Space'] = true; });
    shootButton.addEventListener('touchend', (e) => { e.preventDefault(); keys['Space'] = false; });

    window.addEventListener('resize', () => { if (!lobbyScreen.classList.contains('hidden')) { const c = document.getElementById('game-container'); canvas.width = c.clientWidth; canvas.height = c.clientHeight; }});
    
    loadGameData();
</script>

</body>
</html>

